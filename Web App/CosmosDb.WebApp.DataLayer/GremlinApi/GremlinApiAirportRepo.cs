using CosmosDb.WebApp.Shared;
using Gremlin.Net.Driver;
using Gremlin.Net.Structure.IO.GraphSON;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Text;
using System.Threading.Tasks;

namespace CosmosDb.WebApp.DataLayer.GremlinApi
{

	public static class GremlinApiAirportRepo
	{
		private const int Port = 443;
		private const string DatabaseName = "GraphDb";
		private const string GraphName = "Airport";

		#region "Populate Airport Graph"

		public static async Task<string> PopulateAirportGraph(AppConfig config)
		{
			if (config.BreakForDemos) System.Diagnostics.Debugger.Break();

			var sb = new StringBuilder();

			var hostname = config.GremlinApiHostName;
			var masterKey = config.GremlinApiMasterKey;
			var username = $"/dbs/{DatabaseName}/colls/{GraphName}";

			var gremlinServer = new GremlinServer(hostname, Port, true, username, masterKey);

			using (var client = new GremlinClient(gremlinServer, new GraphSON2Reader(), new GraphSON2Writer(), GremlinClient.GraphSON2MimeType))
			{
				await ClearGraph(client, sb);

				// --- Terminal 1 ---

				// V: Terminal 1
				await CreateTerminal(client, sb, "Terminal 1");

				// V: Gates in terminal 1
				await CreateGate(client, sb, "Gate T1-1");
				await CreateGate(client, sb, "Gate T1-2");
				await CreateGate(client, sb, "Gate T1-3");

				// V: Restaurants in terminal 2
				await CreateRestaurant(client, sb, "Wendys", 0.4m, 9.5m);
				await CreateRestaurant(client, sb, "McDonalds", 0.3m, 8.15m);
				await CreateRestaurant(client, sb, "Chipotle", 0.6m, 12.5m);

				// E: TerminalToGate (cyan)
				await CreateTerminalToGate(client, sb, "Terminal 1", "Gate T1-1", 3);
				await CreateTerminalToGate(client, sb, "Terminal 1", "Gate T1-2", 5);
				await CreateTerminalToGate(client, sb, "Terminal 1", "Gate T1-3", 7);

				// E: TerminalToRestaurant (purple)
				await CreateTerminalToRestaurant(client, sb, "Terminal 1", "Wendys", 5);
				await CreateTerminalToRestaurant(client, sb, "Terminal 1", "McDonalds", 7);
				await CreateTerminalToRestaurant(client, sb, "Terminal 1", "Chipotle", 10);

				// E: GateToNextGate / GateToPrevGate (cyan dashed)
				await CreateGateToGate(client, sb, "Gate T1-1", "Gate T1-2", 2);
				await CreateGateToGate(client, sb, "Gate T1-2", "Gate T1-3", 2);

				// E: GateToRestaurant (purple dashed)
				await CreateGateToRestaurant(client, sb, "Gate T1-1", "Wendys", 2);
				await CreateGateToRestaurant(client, sb, "Gate T1-1", "McDonalds", 4);
				await CreateGateToRestaurant(client, sb, "Gate T1-1", "Chipotle", 6);
				await CreateGateToRestaurant(client, sb, "Gate T1-2", "Wendys", 2);
				await CreateGateToRestaurant(client, sb, "Gate T1-2", "McDonalds", 4);
				await CreateGateToRestaurant(client, sb, "Gate T1-2", "Chipotle", 6);
				await CreateGateToRestaurant(client, sb, "Gate T1-3", "Wendys", 6);
				await CreateGateToRestaurant(client, sb, "Gate T1-3", "McDonalds", 4);
				await CreateGateToRestaurant(client, sb, "Gate T1-3", "Chipotle", 2);

				// --- Terminal 2 ---

				// V: Terminal 2
				await CreateTerminal(client, sb, "Terminal 2");

				// V: Gates in terminal 2
				await CreateGate(client, sb, "Gate T2-1");
				await CreateGate(client, sb, "Gate T2-2");
				await CreateGate(client, sb, "Gate T2-3");

				// V: Restaurants in terminal 2
				await CreateRestaurant(client, sb, "Jack in the Box", 0.3m, 3.15m);
				await CreateRestaurant(client, sb, "Kentucky Fried Chicken", 0.4m, 7.5m);
				await CreateRestaurant(client, sb, "Burger King", 0.2m, 7.15m);

				// E: TerminalToGate
				await CreateTerminalToGate(client, sb, "Terminal 2", "Gate T2-1", 3);
				await CreateTerminalToGate(client, sb, "Terminal 2", "Gate T2-2", 5);
				await CreateTerminalToGate(client, sb, "Terminal 2", "Gate T2-3", 7);

				// E: TerminalToRestaurant
				await CreateTerminalToRestaurant(client, sb, "Terminal 2", "Jack in the Box", 5);
				await CreateTerminalToRestaurant(client, sb, "Terminal 2", "Kentucky Fried Chicken", 7);
				await CreateTerminalToRestaurant(client, sb, "Terminal 2", "Burger King", 10);

				// E: GateToNextGate / GateToPrevGate
				await CreateGateToGate(client, sb, "Gate T2-1", "Gate T2-2", 2);
				await CreateGateToGate(client, sb, "Gate T2-2", "Gate T2-3", 2);

				// E: GateToRestaurant
				await CreateGateToRestaurant(client, sb, "Gate T2-1", "Jack in the Box", 2);
				await CreateGateToRestaurant(client, sb, "Gate T2-1", "Kentucky Fried Chicken", 4);
				await CreateGateToRestaurant(client, sb, "Gate T2-1", "Burger King", 6);
				await CreateGateToRestaurant(client, sb, "Gate T2-2", "Jack in the Box", 2);
				await CreateGateToRestaurant(client, sb, "Gate T2-2", "Kentucky Fried Chicken", 4);
				await CreateGateToRestaurant(client, sb, "Gate T2-2", "Burger King", 6);
				await CreateGateToRestaurant(client, sb, "Gate T2-3", "Jack in the Box", 6);
				await CreateGateToRestaurant(client, sb, "Gate T2-3", "Kentucky Fried Chicken", 4);
				await CreateGateToRestaurant(client, sb, "Gate T2-3", "Burger King", 2);

				// --- Terminal to Terminal ---

				// E: TerminalToNextTerminal / TerminalToPrevTerminal
				await CreateTerminalToTerminal(client, sb, "Terminal 1", "Terminal 2", 10);
			}

			return sb.ToString();
		}

		private static async Task ClearGraph(GremlinClient client, StringBuilder sb)
		{
			var gremlinCode = $@"
				g.V()
					.drop()
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine("Graph has been cleared");
		}

		private static async Task CreateTerminal(GremlinClient client, StringBuilder sb, string id)
		{
			var gremlinCode = $@"
				g.addV('terminal')
					.property('id', '{id}')
					.property('city', 'LA')
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created vertex: Terminal '{id}'");
		}

		private static async Task CreateGate(GremlinClient client, StringBuilder sb, string id)
		{
			var gremlinCode = $@"
				g.addV('gate')
					.property('id', '{id}')
					.property('city', 'LA')
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created vertex: Gate '{id}'");
		}

		private static async Task CreateRestaurant(GremlinClient client, StringBuilder sb, string id, decimal rating, decimal averagePrice)
		{
			var image = GetRestaurantImageB64(id);

			var gremlinCode = $@"
				g.addV('restaurant')
					.property('id', '{id}')
                    .property('imageB64', '{image}')
					.property('city', 'LA')
					.property('rating', {rating})
					.property('averagePrice', {averagePrice})
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created vertex: Restaurant '{id}'");
		}

		private static string GetRestaurantImageB64(string id)
		{
			// Base64-encoded PNG generated from image files using online tool:
			//  https://onlinepngtools.com/convert-png-to-base64
			switch (id)
			{
				case "Wendys":
					return "";
				case "McDonalds":
					return "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";
				case "Chipotle":
					return "";
				case "Jack in the Box":
					return "";
				case "Kentucky Fried Chicken":
					return "";
				case "Burger King":
					return "";
			}
			return null;
		}

		private static async Task CreateTerminalToGate(GremlinClient client, StringBuilder sb, string terminal, string gate, int distanceInMinutes)
		{
			var gremlinCode = $@"
				g.V()
					.has('id', '{terminal}')
					.addE('terminalToGate')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{gate}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: TerminalToGate '{terminal}' > '{gate}'");

			gremlinCode = $@"
				g.V()
					.has('id', '{gate}')
					.addE('gateToTerminal')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{terminal}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: GateToTerminal '{gate}' > '{terminal}'");
		}

		private static async Task CreateTerminalToRestaurant(GremlinClient client, StringBuilder sb, string terminal, string restaurant, int distanceInMinutes)
		{
			var gremlinCode = $@"
				g.V()
					.has('id', '{terminal}')
					.addE('terminalToRestaurant')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{restaurant}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: TerminalToRestaurant '{terminal}' > '{restaurant}'");

			gremlinCode = $@"
				g.V()
					.has('id', '{restaurant}')
					.addE('restaurantToTerminal')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{terminal}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: RestaurantToTerminal '{restaurant}' > '{terminal}'");
		}

		private static async Task CreateGateToGate(GremlinClient client, StringBuilder sb, string gate1, string gate2, int distanceInMinutes)
		{
			var gremlinCode = $@"
				g.V()
					.has('id', '{gate1}')
					.addE('gateToNextGate')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{gate2}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: GateToNextGate '{gate1}' > '{gate2}'");

			gremlinCode = $@"
				g.V()
					.has('id', '{gate2}')
					.addE('gateToPrevGate')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{gate1}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: GateToPrevGate '{gate2}' > '{gate1}'");
		}

		private static async Task CreateGateToRestaurant(GremlinClient client, StringBuilder sb, string gate, string restaurant, int distanceInMinutes)
		{
			var gremlinCode = $@"
				g.V()
					.has('id', '{gate}')
					.addE('gateToRestaurant')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{restaurant}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: GateToRestaurant '{gate}' > '{restaurant}'");

			gremlinCode = $@"
				g.V()
					.has('id', '{restaurant}')
					.addE('restaurantToGate')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{gate}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: RestaurantToGate '{restaurant}' > '{gate}'");
		}

		private static async Task CreateTerminalToTerminal(GremlinClient client, StringBuilder sb, string terminal1, string terminal2, int distanceInMinutes)
		{
			var gremlinCode = $@"
				g.V()
					.has('id', '{terminal1}')
					.addE('terminalToNextTerminal')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{terminal2}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: TerminalToNextTerminal '{terminal1}' > '{terminal2}'");

			gremlinCode = $@"
				g.V()
					.has('id', '{terminal2}')
					.addE('terminalToPrevTerminal')
					.property('distanceInMinutes', {distanceInMinutes})
					.to(
						g.V()
							.has('id', '{terminal1}'))
			";

			await client.SubmitAsync(gremlinCode);
			sb.AppendLine($"Created edge: TerminalToPrevTerminal '{terminal2}' > '{terminal1}'");
		}

		#endregion

		#region "Query Airport Graph (hard-coded)"

		public static async Task<string> QueryAirportGraph(AppConfig config)
		{
			if (config.BreakForDemos) System.Diagnostics.Debugger.Break();

			var sb = new StringBuilder();

			var hostname = config.GremlinApiHostName;
			var masterKey = config.GremlinApiMasterKey;
			var username = $"/dbs/{DatabaseName}/colls/{GraphName}";

			var gremlinServer = new GremlinServer(hostname, Port, true, username, masterKey);

			using (var client = new GremlinClient(gremlinServer, new GraphSON2Reader(), new GraphSON2Writer(), GremlinClient.GraphSON2MimeType))
			{
				sb.AppendLine("*** Scenario 1 - First eat (> .3 rating), then switch terminals, then go to gate ***");

				var firstEatThenSwitchTerminals = @"
					// Start at T1, Gate 2
						g.V('Gate T1-2')

					// Traverse edge from gate to restaurants
						.outE('gateToRestaurant')
						.inV()

					// Filter for restaurants with a rating higher than .3
						.has('rating', gt(0.3))

					// Traverse edge from restaurant back to terminal (T1)
						.outE('restaurantToTerminal')
						.inV()
					
					// Traverse edge from terminal to next terminal (T2)
						.outE('terminalToNextTerminal')
						.inV()
					
					// Traverse edge from terminal (T2) to gates
						.outE('terminalToGate')
						.inV()
					
					// Filter for destination gate T2, Gate 3
						.has('id', 'Gate T2-3')
					
					// Show the possible paths
						.path()
				";

				await RunAirportQuery(client, sb, firstEatThenSwitchTerminals);

				sb.AppendLine();
				sb.AppendLine();
				sb.AppendLine("*** Scenario 2 - First switch terminals, then eat (> .2 rating), then go to gate ***");

				var firstSwitchTerminalsThenEat = @"
					// Start at T1, Gate 2
						g.V('Gate T1-2')

					// Traverse edge from gate to terminal T1
						.outE('gateToTerminal')
						.inV()

					// Traverse edge from terminal to next terminal (T2)
						.outE('terminalToNextTerminal')
						.inV()

					// Traverse edge from terminal to restaurants
						.outE('terminalToRestaurant')
						.inV()
					
					// Filter for restaurants with a rating higher than .2
						.has('rating', gt(0.2))
					
					// Traverse edge from restaurant back to gates
						.outE('restaurantToGate')
						.inV()
					
					// Filter for destination gate T2, Gate 3
						.has('id', 'Gate T2-3')
					
					// Show the possible paths
						.path()
				";

				await RunAirportQuery(client, sb, firstSwitchTerminalsThenEat);
			}

			return sb.ToString();
		}

		private static async Task RunAirportQuery(GremlinClient client, StringBuilder sb, string gremlinCode)
		{
			var results = await client.SubmitAsync<dynamic>(gremlinCode);

			var count = 0;

			foreach (var result in results)
			{
				count++;
				var jResult = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(result));
				var steps = (JArray)jResult["objects"];

				var userStep = 0;
				var totalDistanceInMinutes = 0;
				var i = 0;

				sb.AppendLine();
				sb.AppendLine($"Choice # {count}");

				foreach (var step in steps)
				{
					i++;
					if (step["type"].Value<string>() == "vertex")
					{
						userStep++;
						var userStepCaption = (userStep == 1 ? "Start at" : (i == steps.Count ? "Arrive at" : "Go to"));
						var vertexInfo = $"{userStep}. {userStepCaption} {step["label"]} = {step["id"]}";

						if (step["label"].Value<string>() == "restaurant")
						{
							vertexInfo += $", rating = {step["properties"]["rating"][0]["value"]}";
							vertexInfo += $", avg price = {step["properties"]["averagePrice"][0]["value"]}";
						}

						vertexInfo += $" ({totalDistanceInMinutes} min)";
						sb.AppendLine(vertexInfo);
					}
					else
					{
						var distanceInMinutes = step["properties"]["distanceInMinutes"].Value<int>();
						totalDistanceInMinutes += distanceInMinutes;
						var edgeInfo = $"    ({step["label"]} = {distanceInMinutes} min)";
						sb.AppendLine(edgeInfo);
					}
				}

			}
		}

		#endregion

		#region "Query Airport Graph (application)"

		public static async Task<string[]> GetGates(AppConfig config)
		{
			if (config.BreakForDemos) System.Diagnostics.Debugger.Break();

			var gremlinCode = "g.V().has('label', 'gate')";
			var gateVertices = await ExecuteGremlin(config, gremlinCode);

			var gates = new List<string>();
			foreach (IDictionary<string, object> gateVertex in gateVertices)
			{
				var gateId = gateVertex["id"].ToString();
				gates.Add(gateId);
			}

			return gates.ToArray();
		}

		public static async Task<object> QueryAirportGraph(AppConfig config, AirportQueryRequest request)
		{
			if (config.BreakForDemos) System.Diagnostics.Debugger.Break();

			DemandSeparateTerminals(request);

			var gremlinCode = GenerateGremlinAirportQueryCode(request);
			var gremlinResult = await ExecuteGremlin(config, gremlinCode);

			return gremlinResult;
		}

		private static string GenerateGremlinAirportQueryCode(AirportQueryRequest request)
		{
			var sb = new StringBuilder();

			sb.Append($@"
				// Start at arrival gate
        			g.V('{request.ArrivalGate}')
            ");

			if (request.FirstSwitchTerminalsThenEat)
			{
				sb.Append($@"
					// Traverse edge from arrival gate to terminal exit
        				.outE('gateToTerminal')
        				.inV()

					// Traverse edge from arrival terminal exit to departure (next for T1 to T2, or prev for T2 to T1) terminal entrance
        				.outE('{GetTerminalTraversalEdge(request)}')
        				.inV()

					// Traverse edge from departure terminal to restaurants
        				.outE('terminalToRestaurant')
        				.inV()

					// Filter for restaurants with a minimum rating
        				.has('rating', gt(0.{request.MinYelpRating - 1}))

					// Traverse edge from restaurant back to departure gates
        				.outE('restaurantToGate')
        				.inV()
                ");
			}
			else
			{
				sb.Append($@"
					// Traverse edge from arrival gate to restaurants
        				.outE('gateToRestaurant')
        				.inV()

					// Filter for restaurants with a minimum rating
        				.has('rating', gt(0.{request.MinYelpRating - 1}))

					// Traverse edge from restaurant to arrival terminal exit
        				.outE('restaurantToTerminal')
        				.inV()

					// Traverse edge from arrival terminal exit to departure (next for T1 to T2, or prev for T2 to T1) terminal entrance
        				.outE('{GetTerminalTraversalEdge(request)}')
        				.inV()

					// Traverse edge from departure terminal entrance to departure gates
        				.outE('terminalToGate')
        				.inV()
                    ");
			}

			sb.Append($@"
				// Filter for destination gate
        			.has('id', '{request.DepartureGate}')

				// Show the possible paths
        			.path()
            ");

			return sb.ToString();
		}

		private static void DemandSeparateTerminals(AirportQueryRequest request)
		{
			// based on gate naming convention of 'Gate Tt-g'
			var arrivalTerminal = request.ArrivalGate.Split('-')[0];
			var departureTerminal = request.DepartureGate.Split('-')[0];
			if (arrivalTerminal == departureTerminal)
			{
				throw new Exception("Arrival and departure gates must be in different terminals");
			}
		}

		private static string GetTerminalTraversalEdge(AirportQueryRequest request)
		{
			var arrivalTerminal = request.ArrivalGate.Split('-')[0];
			var edge = (arrivalTerminal == "Gate T1" ? "terminalToNextTerminal" : "terminalToPrevTerminal");
			return edge;
		}

		private static async Task<IReadOnlyCollection<dynamic>> ExecuteGremlin(AppConfig config, string gremlinCode)
		{
			var hostname = config.GremlinApiHostName;
			var masterKey = config.GremlinApiMasterKey;
			var username = $"/dbs/{DatabaseName}/colls/{GraphName}";

			var gremlinServer = new GremlinServer(hostname, Port, true, username, masterKey);

			using (var client = new GremlinClient(gremlinServer, new GraphSON2Reader(), new GraphSON2Writer(), GremlinClient.GraphSON2MimeType))
			{
				var result = await client.SubmitAsync<dynamic>(gremlinCode);
				return result;
			}
		}

		#endregion

	}
}
